import { {{pascalCase name}}Entity } from "@/slices/{{camelCase name}}/entities";
import { {{camelCase name}}EntityMock } from "@/slices/{{camelCase name}}/entities/{{pascalCase name}}Entity.spec";
import { Add{{pascalCase name}}Repository } from "@/slices/{{camelCase name}}/repositories";
import { mock, MockProxy } from "jest-mock-extended";
import MockDate from "mockdate";
import { add{{pascalCase name}}, add{{pascalCase name}}Usecase } from "./add{{pascalCase name}}UseCase";

describe("add{{pascalCase name}}", () => {
    let testInstance: add{{pascalCase name}};
    let add{{pascalCase name}}Repository: MockProxy<Add{{pascalCase name}}Repository>;

    beforeAll(async () => {
        MockDate.set(new Date());
        add{{pascalCase name}}Repository = mock();

        add{{pascalCase name}}Repository.add{{pascalCase name}}.mockResolvedValue({{camelCase name}}EntityMock);
    });

    beforeEach(() => {
        testInstance = add{{pascalCase name}}Usecase(add{{pascalCase name}}Repository);
    });

    afterAll(async () => {
        MockDate.reset();
    });

    it("should call add{{pascalCase name}} of add{{pascalCase name}}Repository with correct values", async () => {
        await testInstance({{camelCase name}}EntityMock);

        expect(add{{pascalCase name}}Repository.add{{pascalCase name}}).toHaveBeenCalledWith(
            new {{pascalCase name}}Entity({{camelCase name}}EntityMock)
        );

        expect(add{{pascalCase name}}Repository.add{{pascalCase name}}).toHaveBeenCalledTimes(1);
    });

    it("should return a new {{camelCase name}} when add{{pascalCase name}}Repository inserts it", async () => {
        const {{camelCase name}} = await testInstance({{camelCase name}}EntityMock);

        expect({{camelCase name}}).toEqual({{camelCase name}}EntityMock);
    });

    it("should return null when add{{pascalCase name}}Repository fails to insert", async () => {
        add{{pascalCase name}}Repository.add{{pascalCase name}}.mockResolvedValue(null);

        const {{camelCase name}} = await testInstance({{camelCase name}}EntityMock);

        expect({{camelCase name}}).toBeNull();
    });

    it("should throw an error when add{{pascalCase name}}Repository throws an error", async () => {
        add{{pascalCase name}}Repository.add{{pascalCase name}}.mockRejectedValue(new Error("Error"));

        await expect(testInstance({{camelCase name}}EntityMock)).rejects.toThrowError("Error");
    });
});
