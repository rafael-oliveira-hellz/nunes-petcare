import { Query } from "@/application/@types";
import { {{camelCase name}}EntityPaginatedMock } from "@/slices/{{camelCase name}}/entities/{{pascalCase name}}Entity.spec";
import { Load{{pascalCase name}}ByPageRepository } from "@/slices/{{camelCase name}}/repositories";
import { mock, MockProxy } from "jest-mock-extended";
import MockDate from "mockdate";
import { load{{pascalCase name}}ByPage, load{{pascalCase name}}ByPageUsecase } from "./Load{{pascalCase name}}ByPageUseCase";

describe("load{{pascalCase name}}ByPage", () => {
    let fakeQuery: Query;
    let testInstance: load{{pascalCase name}}ByPage;
    let load{{pascalCase name}}Repository: MockProxy<Load{{pascalCase name}}ByPageRepository>;

    beforeAll(async () => {
        MockDate.set(new Date());
        load{{pascalCase name}}Repository = mock();

        fakeQuery = {
            fields: {
                name: "name",
            },
            options: {},
        };

        load{{pascalCase name}}Repository.loadByPage.mockResolvedValue({{camelCase name}}EntityPaginatedMock);
    });

    beforeEach(() => {
        testInstance = load{{pascalCase name}}Usecase(load{{pascalCase name}}Repository);
    });

    afterAll(async () => {
        MockDate.reset();
    });

    it("should call load{{pascalCase name}}ByPage of load{{pascalCase name}}Repository with correct values", async () => {
        await testInstance(fakeQuery);

        expect(load{{pascalCase name}}Repository.loadByPage).toHaveBeenCalledWith(fakeQuery);

        expect(load{{pascalCase name}}Repository.loadByPage).toHaveBeenCalledTimes(1);
    });

    it("should return a {{camelCase name}} when load{{pascalCase name}}Repository loads it", async () => {
        const {{camelCase name}} = await testInstance(fakeQuery);

        expect({{camelCase name}}).toEqual({{camelCase name}}EntityPaginatedMock);
    });

    it("should return null when load{{pascalCase name}}Repository fails to load", async () => {
        load{{pascalCase name}}Repository.loadByPage.mockResolvedValue(null);

        const {{camelCase name}} = await testInstance(fakeQuery);

        expect({{camelCase name}}).toBeNull();
    });

    it("should throw an error when load{{pascalCase name}}Repository throws an error", async () => {
        load{{pascalCase name}}Repository.loadByPage.mockRejectedValue(new Error("Error"));

        await expect(testInstance(fakeQuery)).rejects.toThrowError("Error");
    });
});
