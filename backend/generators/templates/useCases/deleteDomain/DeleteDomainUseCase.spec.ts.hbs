import { Query } from "@/application/@types";
import { {{camelCase name}}EntityMock } from "@/slices/{{camelCase name}}/entities/{{pascalCase name}}Entity.spec";
import { Delete{{pascalCase name}}Repository } from "@/slices/{{camelCase name}}/repositories";
import { mock, MockProxy } from "jest-mock-extended";
import MockDate from "mockdate";
import { delete{{pascalCase name}}, delete{{pascalCase name}}Usecase } from "./Delete{{pascalCase name}}UseCase";

describe("delete{{pascalCase name}}", () => {
    let fakeQuery: Query;
    let testInstance: delete{{pascalCase name}};
    let delete{{pascalCase name}}Repository: MockProxy<Delete{{pascalCase name}}Repository>;

    beforeAll(async () => {
        MockDate.set(new Date());
        delete{{pascalCase name}}Repository = mock();

        fakeQuery = {
            fields: {
                name: "name",
            },
            options: {},
        };

        delete{{pascalCase name}}Repository.delete{{pascalCase name}}.mockResolvedValue({{camelCase name}}EntityMock);
    });

    beforeEach(() => {
        testInstance = delete{{pascalCase name}}Usecase(delete{{pascalCase name}}Repository);
    });

    afterAll(async () => {
        MockDate.reset();
    });

    it("should call delete{{pascalCase name}} of delete{{pascalCase name}}Repository with correct values", async () => {
        await testInstance(fakeQuery);

        expect(delete{{pascalCase name}}Repository.delete{{pascalCase name}}).toHaveBeenCalledWith(fakeQuery);

        expect(delete{{pascalCase name}}Repository.delete{{pascalCase name}}).toHaveBeenCalledTimes(1);
    });

    it("should return a new deleted {{camelCase name}} when delete{{pascalCase name}}Repository deletes it", async () => {
        const {{camelCase name}} = await testInstance(fakeQuery);

        expect({{camelCase name}}).toEqual({{camelCase name}}EntityMock);
    });

    it("should return null when delete{{pascalCase name}}Repository fails to insert", async () => {
        delete{{pascalCase name}}Repository.delete{{pascalCase name}}.mockResolvedValue(null);

        const {{camelCase name}} = await testInstance(fakeQuery);

        expect({{camelCase name}}).toBeNull();
    });

    it("should throw an error when delete{{pascalCase name}}Repository throws an error", async () => {
        delete{{pascalCase name}}Repository.delete{{pascalCase name}}.mockRejectedValue(new Error("Error"));

        await expect(testInstance(fakeQuery)).rejects.toThrowError("Error");
    });
});
